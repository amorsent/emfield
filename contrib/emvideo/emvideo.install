<?php
// $Id$

/**
 * @file
 * Installation, configuration, and removal of the emvideo module.
 */

/**
 * Implementation of hook_install().
 */
function emvideo_install() {
  content_notify('install', 'emvideo');
}

/**
 * Implementation of hook_uninstall().
 */
function emvideo_uninstall() {
  content_notify('uninstall', 'emvideo');
}

/**
 * Implementation of hook_enable().
 */
function emvideo_enable() {
  content_notify('enable', 'emvideo');
}

/**
 * Implementation of hook_disable().
 */
function emvideo_disable() {
  content_notify('disable', 'emvideo');
}

/**
 * We need to make sure to show our new 'embed code' filter on Views.
 */
function emvideo_update_1() {
  return _emvideo_update_reset_cache();
}

/**
 * We need a new data field for extra info stored by certain providers, such as blip.tv.
 */
function emvideo_update_2() {
  $ret = array();

  include_once('./'. drupal_get_path('module', 'content') .'/content.module');
  include_once('./'. drupal_get_path('module', 'content') .'/content_admin.inc');

  content_clear_type_cache();
  $fields = content_fields();

  foreach ($fields as $field) {
    switch ($field['type']) {
      case 'emvideo':
        $columns = array(
          'data' => array('type' => 'longtext', 'not null' => TRUE, 'default' => "''", 'sortable' => FALSE),
        );
        // the following line will trigger (negligible) warnings if emvideo_update_2 was run before
        // (column already exists)
        @content_alter_db_field(array(), array(), $field, $columns);
      break;
    }
  }
  $ret = _emvideo_update_reset_cache();
  $ret[] = update_sql("DELETE FROM {cache}");

  return $ret;
}

function _emvideo_update_reset_cache() {
  $ret = _emvideo_update_reset_cache_views();
  $ret[] = update_sql("DELETE FROM {cache_content}");

  return $ret;
}

/**
 * Since we made our engine dependent on emfield, we need to change some variables accordingly.
 */
function emvideo_update_3() {
  $ret = array();
  foreach (emfield_system_list('emvideo') as $provider) {
    // TODO: this will need some attention when we upgrade to d6
    $test = variable_get('emvideo_allow_'. $provider->name, NULL);

    if (isset($test)) {
      variable_set('emfield_'. $module .'_allow_'. $provider->name, variable_get('emvideo_allow_'. $provider->name, TRUE));
    }
  }
  $ret[] = array(
    'query' => t('The Embedded Video Field allowed provider variables have been updated.'),
    'success' => TRUE
  );
  $ret = array_merge($ret, _emvideo_update_reset_cache());

  // now we need to depend on emfield's menu. remove our old admin menu path
  menu_rebuild();

  return $ret;
}

/**
 * Oops. Cleanup from update 3 -- we don't want to accidentally reset our
 * variables if we have to run update 3 again.
 */
function emvideo_update_4() {
  $ret = array();
  foreach (emfield_system_list('emvideo') as $provider) {
    // TODO: this will need some attention when we upgrade to d6
    $test = variable_get('emvideo_allow_'. $provider->name, NULL);
    if (isset($test)) {
      variable_set('emvideo_allow_'. $provider->name, NULL);
    }
  }
  $ret[] = array(
    'query' => t('The old Embedded Video Field allowed provider variables have been cleaned up.'),
    'success' => TRUE
  );

  return $ret;
}

/**
 * Changed the data structure for blip.tv
 * 
 * TODO: This doesn't work. Thought data was cached?
 */
function emvideo_update_5() {
  $ret = _emvideo_update_reset_cache();
  $ret[] = update_sql("DELETE FROM {cache}");

  return $ret;
}

function emvideo_update_6() {
  $ret = _emvideo_update_reset_cache_views();

  return $ret;
}

/**
 * I'd like this to be conditional, so it only runs if they don't have Views
 * installed. However, module_exists doesn't actually work in the update scripts.
 */
function _emvideo_update_reset_cache_views() {
  $ret = array();
  $ret[] = update_sql("DELETE FROM {cache_views}");

  return $ret;
}
